#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>

// Replace with your WiFi credentials
const char* ssid = "STARK NETWORKS";
const char* password = "Vinod630211";

// L298N connections
int ENA_pin = D7;   // PWM pin for motor speed
int IN1 = D1;       // Motor direction
int IN2 = D2;       // Motor direction

String slider_value = "0";   // Initial speed = 0
String motor_dir = "stop";   // Initial direction
const char* input_parameter = "value";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// HTML Page
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>DC Motor Control</title>
  <style>
    html {font-family: Times New Roman; display: inline-block; text-align: center;}
    h2 {font-size: 2.3rem;}
    p {font-size: 1.8rem;}
    body {max-width: 400px; margin:0px auto; padding-bottom: 25px;}
    .slider { -webkit-appearance: none; margin: 14px; width: 360px; height: 25px; background: #FF0000;}
    .slider::-webkit-slider-thumb {-webkit-appearance: none; appearance: none; width: 35px; height: 35px; background:#01070a; cursor: pointer;}
    button {padding:15px 30px; margin:10px; font-size:1.2rem; border:none; border-radius:10px; cursor:pointer;}
    .fwd {background-color: green; color:white;}
    .rev {background-color: blue; color:white;}
    .stop {background-color: red; color:white;}
  </style>
</head>
<body>
  <h2>DC Motor Control Web Server</h2>
  <p>Speed: <span id="textslider_value">%SLIDERVALUE%</span></p>
  <p><input type="range" onchange="updateSliderPWM(this)" id="pwmSlider" min="0" max="255" value="%SLIDERVALUE%" step="1" class="slider"></p>
  <p>
    <button class="fwd" onclick="setDirection('forward')">Forward</button>
    <button class="rev" onclick="setDirection('reverse')">Reverse</button>
    <button class="stop" onclick="setDirection('stop')">Stop</button>
  </p>
  <p>Direction: <span id="direction">%MOTORDIR%</span></p>

<script>
function updateSliderPWM(element) {
  var slider_value = document.getElementById("pwmSlider").value;
  document.getElementById("textslider_value").innerHTML = slider_value;
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "/slider?value="+slider_value, true);
  xhr.send();
}

function setDirection(dir) {
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "/direction?dir="+dir, true);
  xhr.send();
  document.getElementById("direction").innerHTML = dir.toUpperCase();
}
</script>
</body>
</html>
)rawliteral";

// Function to replace placeholders in HTML
String processor(const String& var){
  if (var == "SLIDERVALUE"){ return slider_value; }
  if (var == "MOTORDIR"){ return motor_dir; }
  return String();
}

void setup(){
  Serial.begin(115200);
  delay(1000);

  // Setup motor pins
  pinMode(ENA_pin, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  
  // Configure PWM for ESP8266
  analogWriteRange(255);   // use 0â€“255
  analogWriteFreq(500);    // ~500 Hz for motors

  // Initial state
  analogWrite(ENA_pin, 0);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected! IP Address: ");
  Serial.println(WiFi.localIP());

  // Root page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  // Slider handler
  server.on("/slider", HTTP_GET, [] (AsyncWebServerRequest *request) {
    if (request->hasParam(input_parameter)) {
      slider_value = request->getParam(input_parameter)->value();
      int v = slider_value.toInt();
      v = constrain(v, 0, 255);

      if (v == 0) {
        // Stop motor if slider = 0
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, LOW);
        analogWrite(ENA_pin, 0);
        motor_dir = "stop";
      } else if (motor_dir == "forward") {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        analogWrite(ENA_pin, v);
      } else if (motor_dir == "reverse") {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        analogWrite(ENA_pin, v);
      }
      Serial.printf("Speed set: %d\n", v);
    }
    request->send(200, "text/plain", "OK");
  });

  // Direction handler
  server.on("/direction", HTTP_GET, [] (AsyncWebServerRequest *request) {
    if (request->hasParam("dir")) {
      motor_dir = request->getParam("dir")->value();
      int v = slider_value.toInt();

      if (motor_dir == "forward" && v > 0) {
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        analogWrite(ENA_pin, v);
      } else if (motor_dir == "reverse" && v > 0) {
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, HIGH);
        analogWrite(ENA_pin, v);
      } else { // stop
        digitalWrite(IN1, LOW);
        digitalWrite(IN2, LOW);
        analogWrite(ENA_pin, 0);
      }
      Serial.println("Direction: " + motor_dir);
    }
    request->send(200, "text/plain", "OK");
  });

  // Start server
  server.begin();
}

void loop() {
  // Nothing here (AsyncWebServer handles requests)
}

